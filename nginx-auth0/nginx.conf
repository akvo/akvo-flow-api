env FLOW_API_BACKEND_URL;
env OIDC_DISCOVERY_URL;
env OIDC_EXPECTED_ISSUER;

events {
  worker_connections 128;
}

http {

  server_tokens off;
  lua_package_path '~/lua/?.lua;;';

  resolver 8.8.8.8 ipv6=off;
  error_log stderr info;

  log_format apm '"$time_local" client=$remote_addr '
           'method=$request_method request="$request" '
           'request_length=$request_length '
           'status=$status bytes_sent=$bytes_sent '
           'body_bytes_sent=$body_bytes_sent '
           'referer=$http_referer '
           'user_agent="$http_user_agent" '
           'upstream_addr=$upstream_addr '
           'upstream_status=$upstream_status '
           'request_time=$request_time '
           'upstream_response_time=$upstream_response_time '
           'upstream_connect_time=$upstream_connect_time '
           'upstream_header_time=$upstream_header_time';

  # cache for discovery metadata documents
  lua_shared_dict discovery 10m;
  lua_shared_dict jwks 10m;
  lua_shared_dict userinfo 20m;
  lua_capture_error_log 32m;

  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.pem;

  # Cache 204 responses
  proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=http_204:5m max_size=1g inactive=60m use_temp_path=off;

  init_by_lua_block {
        local errlog = require "ngx.errlog"
        local status, err = errlog.set_filter_level(ngx.WARN)
        if not status then
            ngx.log(ngx.ERR, err)
            return
        end
        ngx.log(ngx.WARN, "set error filter level: WARN")
  }


  server {

    listen 8082;
    gzip            on;
    gzip_min_length 1000;
    gzip_proxied    expired no-cache no-store private auth;
    gzip_comp_level 9;
    gzip_types      application/json;

    large_client_header_buffers 16 32k;

    access_log /usr/local/openresty/nginx/logs/access.log apm;


    if ($http_x_forwarded_proto = "http") {
      return 301 https://$host$request_uri;
    }

    location /flow/config-refresh {
      set_by_lua $upstream 'return os.getenv("FLOW_API_BACKEND_URL")';
      rewrite ^/flow(/.*)$ $1 break;
      proxy_pass http://localhost:3000;
      proxy_set_header Host $host;
    }

    location /flow {

      default_type application/json;

      more_set_headers 'Access-Control-Allow-Origin: *';
      more_set_headers 'Access-Control-Allow-Credentials: true';
      more_set_headers 'Access-Control-Allow-Methods: GET, OPTIONS';
      more_set_headers 'Access-Control-Allow-Headers: Accept,Accept-Encoding,Accept-Language,Authorization,Connection,DNT,Host,Origin,Referer,User-Agent';

      if ($request_method = 'OPTIONS') {
        more_set_headers 'Content-Length: 0' 'Content-Type: text/plain' 'Access-Control-Max-Age: 1728000';
        return 204;
      }

      set_by_lua $upstream 'return os.getenv("FLOW_API_BACKEND_URL")';
      lua_ssl_verify_depth 2;
      lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.pem;

      set $akvoemail "";

      access_by_lua_file /usr/local/openresty/nginx/conf/authn.lua;

      proxy_cache http_204;
      proxy_cache_revalidate off;
      proxy_cache_background_update on;
      proxy_cache_lock on;
      proxy_cache_methods GET;
      proxy_cache_key $proxy_host$request_uri$akvoemail;
      proxy_cache_lock_timeout 30s;
      proxy_cache_lock_age 30s;

      add_header X-Cache-Status $upstream_cache_status;

      rewrite ^/flow(/.*)$ $1 break;
      proxy_pass http://localhost:3000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }
}
