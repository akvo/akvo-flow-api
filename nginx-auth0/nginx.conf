env FLOW_API_BACKEND_URL;
env OIDC_DISCOVERY_URL;
env OIDC_EXPECTED_ISSUER;

events {
  worker_connections 128;
}

http {

  server_tokens off;
  lua_package_path '~/lua/?.lua;;';

  resolver 8.8.8.8;
  error_log stderr debug;

  log_format apm '"$time_local" client=$remote_addr '
           'method=$request_method request="$request" '
           'request_length=$request_length '
           'status=$status bytes_sent=$bytes_sent '
           'body_bytes_sent=$body_bytes_sent '
           'referer=$http_referer '
           'user_agent="$http_user_agent" '
           'upstream_addr=$upstream_addr '
           'upstream_status=$upstream_status '
           'request_time=$request_time '
           'upstream_response_time=$upstream_response_time '
           'upstream_connect_time=$upstream_connect_time '
           'upstream_header_time=$upstream_header_time';

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;
  lua_shared_dict jwks 1m;
  lua_shared_dict userinfo 20m;
  lua_capture_error_log 32m;

  init_by_lua_block {
        local errlog = require "ngx.errlog"
        local status, err = errlog.set_filter_level(ngx.WARN)
        if not status then
            ngx.log(ngx.ERR, err)
            return
        end
        ngx.log(ngx.WARN, "set error filter level: WARN")
  }


  server {

    listen 8082;
    gzip            on;
    gzip_min_length 1000;
    gzip_proxied    expired no-cache no-store private auth;
    gzip_comp_level 9;
    gzip_types      application/json;

    large_client_header_buffers 16 32k;

    access_log /usr/local/openresty/nginx/logs/access.log apm;


    if ($http_x_forwarded_proto = "http") {
      return 301 https://$host$request_uri;
    }

    location /flow/config-refresh {
      set_by_lua $upstream 'return os.getenv("FLOW_API_BACKEND_URL")';
      rewrite ^/flow(/.*)$ $1 break;
      proxy_pass http://localhost:3000;
      proxy_set_header Host $host;
    }

    location /flow {

      default_type application/json;

      more_set_headers 'Access-Control-Allow-Origin: *';
      more_set_headers 'Access-Control-Allow-Credentials: true';
      more_set_headers 'Access-Control-Allow-Methods: GET, OPTIONS';
      more_set_headers 'Access-Control-Allow-Headers: Accept,Accept-Encoding,Accept-Language,Authorization,Connection,DNT,Host,Origin,Referer,User-Agent';

      if ($request_method = 'OPTIONS') {
        more_set_headers 'Content-Length: 0' 'Content-Type: text/plain' 'Access-Control-Max-Age: 1728000';
        return 204;
      }

      set_by_lua $upstream 'return os.getenv("FLOW_API_BACKEND_URL")';
      lua_ssl_verify_depth 2;
      lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.pem;

      access_by_lua_block {

          local cjson = require("cjson")
          local openidc = require("resty.openidc")

          local function cache_set(type, key, value, exp)
              local dict = ngx.shared[type]
              if dict and (exp > 0) then
                local success, err, forcible = dict:set(key, value, exp)
                ngx.log(ngx.DEBUG, "cache set: success=", success, " err=", err, " forcible=", forcible)
              end
          end

            -- retrieve value from server-wide cache if available
          local function cache_get(type, key)
              local dict = ngx.shared[type]
              local value
              if dict then
                value = dict:get(key)
                if value then ngx.log(ngx.DEBUG, "cache hit: type=", type, " key=", key) end
              end
              return value
          end

          function is_empty (s)
            return string.len(string.gsub(s, "%s+", "")) == 0
          end

          local user_agent = ngx.var.http_user_agent
          local accept = ngx.var.http_accept
          local authorization = ngx.var.http_authorization

          if not user_agent or is_empty(user_agent) then
            ngx.status = 400
            local error = cjson.encode({error="Invalid User-Agent request header"})
            ngx.say(error)
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

          if accept ~= "application/vnd.akvo.flow.v2+json" then
            ngx.status = 400
            local error = cjson.encode({error="Invalid Accept request header"})
            ngx.say(error)
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

         if not authorization or is_empty(authorization) then
           ngx.status = 401
           local error = cjson.encode({error="Authentication required"})
           ngx.say(error)
           ngx.exit(ngx.HTTP_UNAUTHORIZED)
         end

         local opts = {
            discovery = os.getenv("OIDC_DISCOVERY_URL"),

            token_signing_alg_values_expected = { "RS256" },
            accept_none_alg = false,
            accept_unsupported_alg = false,
            ssl_verify = "yes",
            expiry_claim = "exp"
         }

         local function check_audience(val)
            if type(val) == "table" then
                for _, aud in pairs(val) do
                    if aud == "http://akvo.org" then return true end
                end
                return false
            else
                return val == "http://akvo.org"
            end
         end

         local validators = require "resty.jwt-validators"
         validators.set_system_leeway(120)
         local res, err, access_token = openidc.bearer_jwt_verify(opts,
            {
              exp = validators.is_not_expired(),
              nbf = validators.opt_is_not_before(),
              iss = validators.equals(os.getenv("OIDC_EXPECTED_ISSUER")),
              aud = check_audience
            })

         if err or not res then
            ngx.status = 403
            if err then
              local error = cjson.encode({error=err})
              ngx.say(err)
            else
              local error = cjson.encode({error="Invalid access_token"})
              ngx.say(error)
            end
            ngx.exit(ngx.HTTP_FORBIDDEN)
         end

          local v = cache_get("userinfo", access_token)

          if not v then
             v, err = openidc.call_userinfo_endpoint(opts, access_token)
             if err or not res then
                 ngx.status = 403
                 if err then
                   local error = cjson.encode({error=err})
                   ngx.say(err)
                 else
                   local error = cjson.encode({error="Invalid access_token"})
                   ngx.say(error)
                 end
                 ngx.exit(ngx.HTTP_FORBIDDEN)
             end
             cache_set("userinfo", access_token, cjson.encode(v), 15 * 60)
          end

          ngx.req.set_header("X-Akvo-Email", v.email)
      }
      rewrite ^/flow(/.*)$ $1 break;
      proxy_pass http://localhost:3000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }
}
