env FLOW_API_URL;
env TOKEN_INTROSPECTION_URL;
env CLIENT_ID;
env CLIENT_SECRET;

events {
  worker_connections 128;
}

http {

  lua_package_path '~/lua/?.lua;;';

  resolver 8.8.8.8;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;


  server {
    listen 8081;

    location /flow {

      if ( $request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET';
        add_header 'Access-Control-Allow-Headers' 'Authorization,Keep-Alive,User-Agent,If-Modified-Since,Cache-Control,Content-Type';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Content-Length' '0';
        return 200;
      }

      set_by_lua $upstream 'return os.getenv("FLOW_API_URL")';


      access_by_lua '
          local introspection_url = os.getenv("TOKEN_INTROSPECTION_URL")

          local opts = {
            introspection_endpoint = introspection_url,
            introspection_token_param_name="token",
            client_id = os.getenv("CLIENT_ID"),
            client_secret = os.getenv("CLIENT_SECRET"),
            ssl_verify = string.sub(introspection_url, 1, 5) ~= "https" and "yes" or "no"
          }

          local res, err = require("resty.openidc").introspect(opts)

          if err or not res then
            ngx.status = 403
            ngx.say(err and err or "No access_token provided")
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end

          ngx.req.set_header("X-AKVO-USER", res.email)
          ngx.req.set_header("X-AKVO-CLAIMS", res)
      ';

     proxy_pass $upstream/;
    }
  }
}
