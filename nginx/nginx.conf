env FLOW_API_BACKEND_URL;
env TOKEN_INTROSPECTION_URL;
env SECRETS_MOUNT_PATH;

events {
  worker_connections 128;
}

http {

  server_tokens off;
  lua_package_path '~/lua/?.lua;;';

  resolver 8.8.8.8;

  # cache for discovery metadata documents
  lua_shared_dict discovery 1m;
  lua_shared_dict jwks 1m;
  lua_shared_dict userinfo 20m;
  lua_capture_error_log 32m;

  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.pem;


  log_format apm '"$time_local" client=$remote_addr '
           'method=$request_method request="$request" '
           'request_length=$request_length '
           'status=$status bytes_sent=$bytes_sent '
           'body_bytes_sent=$body_bytes_sent '
           'referer=$http_referer '
           'user_agent="$http_user_agent" '
           'upstream_addr=$upstream_addr '
           'upstream_status=$upstream_status '
           'request_time=$request_time '
           'upstream_response_time=$upstream_response_time '
           'upstream_connect_time=$upstream_connect_time '
           'upstream_header_time=$upstream_header_time';


  server {

    listen 8081;
    gzip            on;
    gzip_min_length 1000;
    gzip_proxied    expired no-cache no-store private auth;
    gzip_comp_level 9;
    gzip_types      application/json;
    large_client_header_buffers 16 32k;

    access_log /usr/local/openresty/nginx/logs/access.log apm;

    if ($http_x_forwarded_proto = "http") {
      return 301 https://$host$request_uri;
    }

    location /flow/config-refresh {
      set_by_lua $upstream 'return os.getenv("FLOW_API_BACKEND_URL")';
      rewrite ^/flow(/.*)$ $1 break;
      proxy_pass http://localhost:3000;
      proxy_set_header Host $host;
    }

    location ~ ^/flow/orgs/.*/sync.* {
      return 400 '{"message": "Please use the new authentication method"}';
    }

    location /flow {

      default_type application/json;

      more_set_headers 'Access-Control-Allow-Origin: *';
      more_set_headers 'Access-Control-Allow-Credentials: true';
      more_set_headers 'Access-Control-Allow-Methods: GET, OPTIONS';
      more_set_headers 'Access-Control-Allow-Headers: Accept,Accept-Encoding,Accept-Language,Authorization,Connection,DNT,Host,Origin,Referer,User-Agent';

      if ($request_method = 'OPTIONS') {
        more_set_headers 'Content-Length: 0' 'Content-Type: text/plain' 'Access-Control-Max-Age: 1728000';
        return 204;
      }

      set_by_lua $upstream 'return os.getenv("FLOW_API_BACKEND_URL")';

      access_by_lua_block {

          local cjson= require("cjson")
          local openidc = require("resty.openidc")

          -- Enable for debugging
          -- openidc.set_logging(nil, { DEBUG = ngx.ERR })

          function is_empty (s)
            return string.len(string.gsub(s, "%s+", "")) == 0
          end

          local user_agent = ngx.var.http_user_agent
          local accept = ngx.var.http_accept
          local authorization = ngx.var.http_authorization

          if not user_agent or is_empty(user_agent) then
            ngx.status = 400
            local error = cjson.encode({error="Invalid User-Agent request header"})
            ngx.say(error)
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

          if accept ~= "application/vnd.akvo.flow.v2+json" then
            ngx.status = 400
            local error = cjson.encode({error="Invalid Accept request header"})
            ngx.say(error)
            ngx.exit(ngx.HTTP_BAD_REQUEST)
          end

         if not authorization or is_empty(authorization) then
           ngx.status = 401
           local error = cjson.encode({error="Authentication required"})
           ngx.say(error)
           ngx.exit(ngx.HTTP_UNAUTHORIZED)
         end

          local introspection_url = os.getenv("TOKEN_INTROSPECTION_URL")

          local secrets_mount_path = os.getenv("SECRETS_MOUNT_PATH")
          local file = io.open(secrets_mount_path .. "/keycloak.json", "r")
          local json_config = nil
          local kc_config = nil

          if file then
            json_config = file:read("*a")
            file:close()
          end

          if json_config then
             kc_config = cjson.decode(json_config)
	  else
             ngx.status = 500
             ngx.say("Internal server error - Unable to read config")
             ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
          end

          local opts = {
            introspection_endpoint = introspection_url,
            introspection_token_param_name = "token",
            client_id = kc_config.resource,
            client_secret = kc_config.credentials.secret,
            ssl_verify = "yes",
            expiry_claim = "exp"
          }

          local res, err = openidc.introspect(opts)

          if err or not res or not res.active then
            ngx.status = 403
            if err then
              local error = cjson.encode({error=err})
              ngx.say(err)
            else
              local error = cjson.encode({error="Invalid access_token"})
              ngx.say(error)
            end
            ngx.exit(ngx.HTTP_FORBIDDEN)
          end

          ngx.req.set_header("X-Akvo-Email", res.email)
      }

      rewrite ^/flow(/.*)$ $1 break;
      proxy_pass http://localhost:3000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
    }
  }
}
